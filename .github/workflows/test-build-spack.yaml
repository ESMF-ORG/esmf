name: Build ESMF Using Spack

on:
  workflow_dispatch:
  push:

jobs:
  latest-stable:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        compiler: [intel@2023.0.0]
        esmf: [esmf@develop+parallelio~xerces~pnetcdf%intel]

    env:
      INTEL_INSTALL_DIR: /opt/intel/oneapi 

    steps:
    # check out base repo
    - name: Checkout Base Repository
      uses: actions/checkout@v3

    # prepare core environment
    - name: Install Core Development Tools
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install tar unzip file gringo
        sudo apt-get -qq install build-essential binutils-dev gfortran
        sudo apt-get -qq install python3-dev

    # concretize test environment 
    - name: Concretize Spack Environment Using YAML Specification
      run: |
        echo ${{ matrix.compiler }}
        echo ${{ matrix.esmf }}
        ${{ github.workspace }}/.github/workflows/scripts/spack_concretize.sh \
          -a x86_64_v4 \
          -c ${{ matrix.compiler }} \
          -d "${{ matrix.compiler }},${{ matrix.esmf }}" \
          -i ~/.spack-ci \
          -r ${{ github.workspace }} 


    #- name: Checkout Base Repository
    #  uses: actions/checkout@v3

    #- name: Restore Core Development Environment
    #  uses: actions/cache@v3
    #  with:
    #    path: ${{ env.INTEL_INSTALL_DIR }}
    #    key: cache-${{ runner.os }}-${{ matrix.compiler }}
    #    restore-keys: |
    #      spack-${{ runner.os }}-${{ inputs.architecture }}-${{ hashFiles('**/spack.lock') }}

    #- name: Install Core Development Environment
    #  run: |
    #    cd ${{ github.workspace }}/.github/workflows
    #    if [[ "${{Â matrix.compiler }}" == "intel" ]]; then
    #      scripts/install_oneapi.sh -i ${{ env.INTEL_INSTALL_DIR }} \
    #    else
    #      scripts/install_gnu.sh
    #    fi
