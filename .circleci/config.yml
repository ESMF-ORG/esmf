#TODO: Test applications (i.e. RegridWeightGen)
#TODO: Build ESMF tags in ESCOMP
#TODO: Remove old bekozi Docker credentials from CircleCi

version: 2.1

jobs:

  build-escomp-centos8:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: Checkout Code (ESCOMP-Containers)
          command: git clone --depth 1 https://github.com/ESCOMP/ESCOMP-Containers.git
      - run:
          name: Checkout Code (ESMF)
          command: git clone --branch $CIRCLE_BRANCH --depth 1 https://github.com/esmf-org/esmf.git
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Build
          command: docker build -t "esmf/centos8" --file "ESCOMP-Containers/base/centos8/Dockerfile" .
      - run:
          name: Docker Push
          command: bash esmf/.circleci/sh/docker-push-generic.sh "esmf/centos8"

  build-escomp-esmf:
    docker:
      - image: cimg/base:2020.01
    resource_class: xlarge
    steps:
      - run:
          name: Checkout Code (ESCOMP-Containers)
          command: git clone --depth 1 https://github.com/ESCOMP/ESCOMP-Containers.git
      - run:
          name: Checkout Code (ESMF)
          command: git clone --branch $CIRCLE_BRANCH --depth 1 https://github.com/esmf-org/esmf.git
      - setup_remote_docker
      - run:
          name: Docker Build
          command: docker build -t "esmf/esmf:${CIRCLE_BRANCH}" --file "ESCOMP-Containers/ESMF/dev/Dockerfile" --build-arg ESMF_BRANCH="${CIRCLE_BRANCH}" --build-arg DOCKER_NAMESPACE="esmf" .
      - run:
          name: Docker Push
          command: bash esmf/.circleci/sh/docker-push-generic.sh "esmf/esmf:${CIRCLE_BRANCH}"
      - run:
          name: Extract Artifacts
          command: bash esmf/.circleci/sh/extract-artifacts.sh "/tmp/artifacts" "/tmp/artifacts/*" "esmf/esmf:${CIRCLE_BRANCH}"
      - store_artifacts:
          path: /tmp/artifacts

  should-run-linux:
    docker:
      - image: cimg/base:2020.01
    resource_class: small
    steps:
      - run: exit 0

  should-build-docs:
    docker:
      - image: cimg/base:2020.01
    resource_class: small
    steps:
      - run: exit 0

  should-run-osx:
    docker:
      - image: cimg/base:2020.01
    resource_class: small
    steps:
      - run: exit 0

  build-run-tests:
    parameters:
      target:
        type: string
    docker:
      - image: esmf/esmf:$CIRCLE_BRANCH
    resource_class: xlarge
    environment:
      - ESMF_ARTIFACTS: /artifacts
      - ESMF_OUTDIR: /artifacts/test-artifacts
    steps:
      - run:
          name: Checkout Code (ESCOMP-Containers)
          command: git clone --depth 1 https://github.com/ESCOMP/ESCOMP-Containers.git
      - run:
          name: Checkout Code (ESMF)
          command: git clone --branch $CIRCLE_BRANCH --depth 1 https://github.com/esmf-org/esmf.git
#      - run:
#          name: passthru-build-tests
#          command: exit 0
      - run:
          name: Create Artifacts Directory
          command: mkdir -p $ESMF_OUTDIR
      - run:
          name: make build_<< parameters.target >>
          command: cd $ESMF_DIR && make build_<< parameters.target >> 2>&1 | tee $ESMF_OUTDIR/esmf-make-build_<< parameters.target >>.out
      - run:
          name: make run_<< parameters.target >>
          command: cd $ESMF_DIR && make run_<< parameters.target >> 2>&1 | tee $ESMF_OUTDIR/esmf-make-run_<< parameters.target >>.out
      - run:
          name: Collect Artifacts
          command: bash $ESMF_DIR/.circleci/sh/collect-test-artifacts.sh << parameters.target >>
          when: always
      - store_artifacts:
          path: /artifacts/test-artifacts.zip
          destination: << parameters.target >>-artifacts.zip

  build-esmf-docs:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: Checkout Code (ESCOMP-Containers)
          command: git clone --depth 1 https://github.com/ESCOMP/ESCOMP-Containers.git
      - run:
          name: Checkout Code (ESMF)
          command: git clone --branch $CIRCLE_BRANCH --depth 1 https://github.com/esmf-org/esmf.git
#      - run:
#          name: passthru-build-docs
#          command: exit 0
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Build esmf-doc-base
          command: docker build -t "esmf/esmf-doc-base" --file "ESCOMP-Containers/ESMF/doc/esmf-doc-base/Dockerfile" --build-arg DOCKER_NAMESPACE="esmf" .
      - run:
          name: Docker Push esmf-doc-base
          command: bash esmf/.circleci/sh/docker-push-generic.sh "esmf/esmf-doc-base"
      - run:
          name: Docker Build esmf-doc
          command: docker build -t "esmf/esmf-doc:${CIRCLE_BRANCH}" --file "ESCOMP-Containers/ESMF/doc/esmf-doc/Dockerfile" --build-arg ESMF_BRANCH="${CIRCLE_BRANCH}" --build-arg DOCKER_NAMESPACE="esmf" --no-cache .
      - run:
          name: Extract Artifacts
          command: bash esmf/.circleci/sh/extract-artifacts.sh "/tmp/artifacts" "/artifacts/doc-artifacts.zip" "esmf/esmf-doc:${CIRCLE_BRANCH}"
      - save_cache:
          key: esmf-docs-{{ .Revision }}
          paths:
            - /tmp/artifacts
            - esmf
      - store_artifacts:
          path: /tmp/artifacts/doc-artifacts.zip
          destination: doc-artifacts.zip

  publish-esmf-docs:
    machine: true
    steps:
#      - run:
#          name: publish-docs
#          command: exit 0
      - restore_cache:
          keys:
            - esmf-docs-{{ .Revision }}
      - run:
          name: Prep Artifacts
          command: cd /tmp/artifacts && unzip doc-artifacts.zip
      - run:
          name: Push to github.io
          command: bash esmf/.circleci/sh/doc-push.sh

  external_demos:
    machine: true
    steps:
      - run:
          name: passthru-external_demos
          command: exit 0

  bit-for-bit:
    machine: true
    steps:
      - run:
          name: passthru-bit-for-bit
          command: exit 0

  esmpy-test:
    parameters:
      target:
        type: string
    docker:
      - image: esmf/esmf:$CIRCLE_BRANCH
    steps:
      - run:
          name: python setup.py test<< parameters.target>>
          command: cd ${ESMPY_DIR} && python setup.py test<< parameters.target>>
      - run:
          name: Prep Test Results
          command: mkdir -p /tmp/test-results && mv ${ESMF_DIR}/src/addon/ESMPy/nosetests.xml /tmp/test-results/
      - store_test_results:
          path: /tmp/test-results

  build-esmpy-docs:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: Checkout Code (ESCOMP-Containers)
#          command: git clone --depth 1 https://github.com/ESCOMP/ESCOMP-Containers.git
          command: git clone --depth 1 --branch esmpy-doc-base-to-ubuntu https://github.com/esmf-org/ESCOMP-Containers.git #tdk:revert
      - run:
          name: Checkout Code (ESMF)
          command: git clone --branch $CIRCLE_BRANCH --depth 1 https://github.com/esmf-org/esmf.git
      - setup_remote_docker:
          docker_layer_caching: true
#      - run: #tdk:enable
#          name: Docker Build esmpy-doc-base
#          command: docker build -t "esmf/esmpy-doc-base" --file "ESCOMP-Containers/ESMF/doc/esmpy-doc-base/Dockerfile" --build-arg DOCKER_NAMESPACE="esmf" .
#      - run:
#          name: Docker Push esmpy-doc-base
#          command: bash esmf/.circleci/sh/docker-push-generic.sh "esmf/esmpy-doc-base"
      - run:
          name: Docker Build esmpy-doc
          command: docker build -t "esmf/esmpy-doc" --file "ESCOMP-Containers/ESMF/doc/esmpy-doc/Dockerfile" --build-arg ESMF_BRANCH="${CIRCLE_BRANCH}" --build-arg DOCKER_NAMESPACE="esmf" --no-cache .
      - run:
          name: Extract Doc Artifacts
          command: bash esmf/.circleci/sh/extract-artifacts.sh /tmp/artifacts /artifacts/doc-esmpy.zip esmf/esmpy-doc
      - save_cache:
          key: esmpy-docs-{{ .Revision }}
          paths:
            - /tmp/artifacts
            - esmf
      - store_artifacts:
          path: /tmp/artifacts/doc-esmpy.zip
          destination: doc-esmpy.zip

  publish-esmpy-docs:
    machine: true
    resource_class: small
    steps:
      - restore_cache:
          keys:
            - esmpy-docs-{{ .Revision }}
      - run:
          name: Prep Artifacts
          command: cd /tmp/artifacts && unzip doc-esmpy.zip
      - run:
          name: Push to github.io
          command: bash esmf/.circleci/sh/doc-push-esmpy.sh

  osx-esmf:
    macos:
      xcode: "11.3.1"
#    resource_class: large
    steps:
      - run:
          name: Checkout Code
          command: cd && git clone --branch $CIRCLE_BRANCH --depth 1 https://github.com/esmf-org/esmf.git esmf
      - restore_cache:
          keys:
            - osx-cache-10
#      - run:
#          name: Create Brew Environment
#          command: bash ~/esmf/.circleci/sh/osx/osx-brew-install.sh
      - run:
          name: Create Conda Environment
          command: bash ~/esmf/.circleci/sh/osx/osx-conda.sh
      - save_cache:
          key: osx-cache-10
          paths:
            - ~/miniconda
#            - /usr/local/Cellar
      - run:
          name: make info
          command: bash ~/esmf/.circleci/sh/osx/osx-make-funcs.sh "info"
      - run:
          name: make
          command: bash ~/esmf/.circleci/sh/osx/osx-make-funcs.sh "make"
      - run:
          name: make install
          command: bash ~/esmf/.circleci/sh/osx/osx-make-funcs.sh "install"
#      - run:
#          name: make check
#          command: bash ~/esmf/.circleci/sh/osx/osx-make-funcs.sh "check"
      - run:
          name: Collect Test Artifacts
          command: bash ~/esmf/.circleci/sh/osx/osx-make-funcs.sh "collect-test-results"
          when: always
      - store_artifacts:
          path: /tmp/osx-artifacts.zip
          destination: osx-artifacts.zip

# =============================================================================

workflows:

  build-and-test-commit:
    jobs:
      - should-run-linux:
          type: approval
      - build-escomp-esmf:
          requires:
            - should-run-linux
      - build-run-tests:
          name: build-run-commit-<< matrix.target >>
          matrix:
            parameters:
              target: ["unit_tests", "system_tests", "examples"]
          requires:
            - build-escomp-esmf
      - esmpy-test:
          name: esmpy-test<< matrix.target >>
          matrix:
            parameters:
              target: ["", "_parallel", "_examples", "_examples_parallel"]
          requires:
            - build-escomp-esmf
#      - osx-esmf

  build-and-test:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-escomp-centos8
      - build-escomp-esmf:
          requires:
            - build-escomp-centos8
      - build-run-tests:
          name: build-run-<< matrix.target >>
          matrix:
            parameters:
              target: ["unit_tests", "system_tests", "examples"]
          requires:
            - build-escomp-esmf
#      - nuopc-protos:
#          name: placeholder-external_demos
#          requires:
#            - build-run-tests
#      - extended-tests:
#          name: placeholder-external_demos
#          requires:
#            - build-run-tests
#      - bit-for-bit:
#          name: placeholder-bit-for-bit
#          requires:
#            - build-run-tests
      - esmpy-test:
          name: esmpy-test<< matrix.target >>
          matrix:
            parameters:
              target: ["", "_parallel", "_examples", "_examples_parallel"]
          requires:
            - build-escomp-esmf
#      - osx-esmf

  docs-commit:
    jobs:
#      - should-build-docs:
#          type: approval
      - build-esmf-docs
      - publish-esmf-docs:
          requires:
            - build-esmf-docs
          filters:
            branches:
              only:
                - develop
      - build-esmpy-docs
      - publish-esmpy-docs:
          requires:
            - build-esmpy-docs
          filters:
            branches:
              only:
                - develop

#  osx-commit:
#    jobs:
#      - should-run-osx:
#          type: approval
#      - osx-esmf:
#          requires:
#            - should-run-osx
